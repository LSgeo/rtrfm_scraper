import spotipy
from spotipy.oauth2 import SpotifyOAuth
from pathlib import Path
import logging

def authenticate_spotify(tokens) -> spotipy.Spotify:
    return spotipy.Spotify(
        auth_manager=SpotifyOAuth(
            client_id=tokens.CLIENT_ID,
            client_secret=tokens.CLIENT_SECRET,
            redirect_uri=tokens.REDIRECT_URI,
            scope="user-library-read playlist-modify-public",
        )
    )

def search_spotify(spot: spotipy.Spotify, search: tuple) -> str:
    """Return best matching song URI for (artist, track) tuple"""
    # result = spot.search(f"artist:{search[0]} track:{search[1]}", type="track")
    result = spot.search(" ".join(search), type="track")

    if not result.get("tracks").get("total"):
        return " - ".join(search)

    return result["tracks"]["items"][0]["id"]


def create_spotify_playlist(SHOWTITLES:dict, spot: spotipy.Spotify, show_url: str, **kwargs) -> str:
    """Create a new playlist for the show, with stylised name and description"""
    name = Path(show_url).stem
    stylised_name = SHOWTITLES[name.split("-")[0]]
    date = "-".join(name.split("-")[1:])
    desc = (
        f"Tracklist for the RTRFM 92.1 show broadcast at: {show_url}. "
        # f"Found {len(kwargs.get('found'))}/{kwargs.get('total')} songs on Spotify. "
        f"Missing Tracks: [{', '.join(kwargs.get('missing'))}]. "
        f"Some tracks may have been incorrectly matched. "
        f"Automatically generated by LSgeo. "
    )
    # Note, line breaks are not permitted.

    user_id = spot.me()["id"]
    playlist = spot.user_playlist_create(
        user_id, name=f"{stylised_name} - {date}", description=desc
    )
    logger = logging.getLogger('rtrfm_log')
    logger.info(f"Playlist created at {playlist['external_urls']['spotify']}")

    return playlist.get("id")
