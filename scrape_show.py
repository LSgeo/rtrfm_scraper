import argparse
import requests
import logging
from pathlib import Path

import spotipy
from bs4 import BeautifulSoup
from spotipy.oauth2 import SpotifyOAuth

try:
    import spotify_tokens as tokens
except ImportError:
    raise ImportError(
        "Please add your required tokens to a file called spotify_tokens.py"
    )

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SHOWTITLES = {
    "allcity": "All City",
    "basscheck": "Bass Check",
    "behindthemirror": "Behind the Mirror",
    "blackandblue": "Black and Blue",
    "criticalmass": "Critical Mass",
    "difficultlistening": "Difficult Listening",
    "drivetime": "Drivetime",
    "fullfrequency": "Full Frequency",
    "giantsteps": "Giant Steps",
    "globalrhythm": "Global Rhythm Pot",
    "goldenapples": "Golden Apples of the Sun",
    "homegrown": "Homegrown",
    "peer2peer": "peer2peer",
    "rhythmtrippin": "Rhythm Trippin'",
    "rockrattleandroll": "Rock Rattle and Roll",
    "saturdayjazz": "Saturday Jazz",
    "sundaymorning": "Sunday Morning Coming Down",
    "uplate": "Up Late",
}  # TODO Mostly predicted by copilot, double check

parser = argparse.ArgumentParser(
    description="Create a Spotify playlist from an RTRFM show tracklist"
)
parser.add_argument("show_url", type=str, help="URL of the show to process")


def scrape_rtrfm_show(show_url) -> list:
    """Scrape tracklist from a RTRFM show page

    Tracks are nicely isolated in a artist-track div, but I just use
    the pre-generated 'google search this track' button.
    """
    logger.info(f"Scraping {show_url}")
    soup = BeautifulSoup(requests.get(show_url).text, "lxml")

    artist_track_list = []
    for a in soup.find_all("a", "black button"):
        artist_track_list.append(
            (a.get_attribute_list("href")[0].split("="))[1].split("+")
        )
    return artist_track_list


def authenticate_spotify() -> spotipy.Spotify:
    return spotipy.Spotify(
        auth_manager=SpotifyOAuth(
            client_id=tokens.CLIENT_ID,
            client_secret=tokens.CLIENT_SECRET,
            redirect_uri=tokens.REDIRECT_URI,
            scope="user-library-read playlist-modify-public",
        )
    )


def search_spotify(spot: spotipy.Spotify, search: tuple) -> str:
    """Return best matching song URI for (artist, track) tuple"""
    # result = spot.search(f"artist:{search[0]} track:{search[1]}", type="track")
    result = spot.search(" ".join(search), type="track")

    if not result.get("tracks").get("total"):
        return " - ".join(search)

    return result["tracks"]["items"][0]["id"]


def create_spotify_playlist(spot: spotipy.Spotify, show_url: str, **kwargs) -> str:
    """Create a new playlist for the show, with stylised name and description"""
    name = Path(show_url).stem
    stylised_name = SHOWTITLES[name.split("-")[0]]
    date = "-".join(name.split("-")[1:])
    desc = (
        f"Tracklist for the RTRFM 92.1 show broadcast at: {show_url}. "
        # f"Found {len(kwargs.get('found'))}/{kwargs.get('total')} songs on Spotify. "
        f"Missing Tracks: [{', '.join(kwargs.get('missing'))}]. "
        f"Some tracks may have been incorrectly matched. "
        f"Automatically generated by LSgeo. "
    )
    # Note, line breaks are not permitted.

    user_id = spot.me()["id"]
    playlist = spot.user_playlist_create(
        user_id, name=f"{stylised_name} - {date}", description=desc
    )

    logger.info(f"Playlist created at {playlist['external_urls']['spotify']}")

    return playlist.get("id")


def search_soundcloud():
    return NotImplementedError


def process_show(show_url: str) -> None:
    """Scrape track list from a show-episode on RTRFM"""

    if "show-episode" not in show_url:
        raise ValueError(
            "Must specify a specific show with date in url (press previous)"
        )

    artist_track_list = scrape_rtrfm_show(show_url)
    num_tracks = len(artist_track_list)
    logger.info(f"Read {num_tracks} tracks from {show_url} tracklist")

    spot = authenticate_spotify()

    tracks = []
    for artist_track in artist_track_list:
        tracks.append(search_spotify(spot, artist_track))

    # spotify track ids are 22 chars long
    missing = [id for id in tracks if len(id) != 22]
    track_ids = [id for id in tracks if len(id) == 22]

    logger.info(f"I think I Found {len(track_ids)} / {num_tracks} tracks on Spotify")

    playlist_id = create_spotify_playlist(
        spot, show_url, found=track_ids, total=num_tracks, missing=missing
    )

    spot.playlist_add_items(playlist_id, track_ids)


if __name__ == "__main__":
    args = parser.parse_args()
    process_show(show_url=args.show_url)
